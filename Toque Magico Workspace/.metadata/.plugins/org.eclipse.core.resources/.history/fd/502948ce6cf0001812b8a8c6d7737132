package br.edu.ifcvideira.DAOs;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;

import br.edu.ifcvideira.beans.Agenda;
import br.edu.ifcvideira.beans.Login;
import br.edu.ifcvideira.utils.Conexao;

public class AgendaDao {

	/**
	 * Registra um novo evento/Marcação de horário no calendário (agenda)
	 * 
	 * @param ag
	 * @throws SQLException
	 * @throws Exception
	 */
	public void registrarAgenda(Agenda ag) throws SQLException, Exception {
		int id_cliente = 0;
		//Busca o id do fornecedor a partir do nome
		try {
			String sql = "SELECT id_cliente FROM cliente WHERE nome LIKE ?";
			java.sql.PreparedStatement sqlPrep = Conexao.conectar().prepareStatement(sql);
			sqlPrep.setString(1, ag.getCliente());
			ResultSet rs = sqlPrep.executeQuery();
			
			while (rs.next()) {
				id_cliente = Integer.parseInt(rs.getString(1));
			}
			sqlPrep.close();
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}
		
		//Insere valores
		try {
			String sql = "INSERT INTO agenda (data, hora, valor_combinado, id_cliente_agenda, id_usuario_agenda, realizado) VALUES (?,?,?,?,?,?)";
			java.sql.PreparedStatement sqlPrep = Conexao.conectar().prepareStatement(sql);
			int contador = 1;
			sqlPrep.setString(contador++, ag.getData());
			sqlPrep.setString(contador++, ag.getHora());
			sqlPrep.setDouble(contador++, ag.getValorCombinado());
			sqlPrep.setInt(contador++, id_cliente);
			sqlPrep.setInt(contador++, Login.idUser);
			sqlPrep.setBoolean(contador++, ag.isRealizado());
			sqlPrep.execute();

		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}
	}

	/**
	 * Atualiza um evento registrado
	 * 
	 * @param ag
	 * @throws Exception
	 */
	public void atualizarAgenda(Agenda ag) throws Exception {
		int id_cliente = 0;
		//Busca o id do fornecedor a partir do nome
		try {
			String sql = "SELECT id_cliente FROM cliente WHERE nome LIKE ?";
			java.sql.PreparedStatement sqlPrep = Conexao.conectar().prepareStatement(sql);
			sqlPrep.setString(1, ag.getCliente());
			ResultSet rs = sqlPrep.executeQuery();
			
			while (rs.next()) {
				id_cliente = Integer.parseInt(rs.getString(1));
			}
			sqlPrep.close();
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}
		try {
			String sql = "UPDATE agenda SET data=?, hora=?, valor_combinado=?, id_cliente_agenda=?, realizado=?, id_usuario_agenda=? WHERE id_evento=?";
			PreparedStatement sqlPrep = Conexao.conectar().prepareStatement(sql);
			int contador = 1;
			sqlPrep.setString(contador++, ag.getData());
			sqlPrep.setString(contador++, ag.getHora());
			sqlPrep.setDouble(contador++, ag.getValorCombinado());
			sqlPrep.setInt(contador++, id_cliente);
			sqlPrep.setBoolean(contador++, ag.isRealizado());
			sqlPrep.setInt(contador++, Login.idUser);
			sqlPrep.setInt(contador++, ag.getCodigo());
			sqlPrep.execute();
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}
	}

	/**
	 * Exclui um evento, selecionado a partir da tabela
	 * 
	 * @param ag
	 * @throws Exception
	 */
	public void deletarAgenda(Agenda ag) throws Exception {
		try {
			String sql = "DELETE FROM agenda WHERE id_evento=? ";
			PreparedStatement sqlPrep = (PreparedStatement) Conexao.conectar().prepareStatement(sql);
			sqlPrep.setInt(1, ag.getCodigo());
			sqlPrep.execute();
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}
	}

	/**
	 * Busca os eventos do dia que foi selecionado
	 * 
	 * @param data
	 * @return
	 * @throws SQLException
	 * @throws Exception
	 */
	public List<Object> buscarTodos(String data) throws SQLException, Exception {
		List<Object> agenda = new ArrayList<Object>();
		try {
			String sql = "SELECT * FROM agenda WHERE data LIKE ?";

			java.sql.PreparedStatement sqlPrep = Conexao.conectar().prepareStatement(sql);
			sqlPrep.setString(1, data);
			
			ResultSet rs = sqlPrep.executeQuery();

			while (rs.next()) {
				Object[] linha = { rs.getString(1), rs.getString(3), rs.getString(3)/* ####Buscar SERVIÇO */,
						rs.getString(2), rs.getString(7), rs.getString(5) };
				agenda.add(linha);
			}
			sqlPrep.close();

		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}
		return agenda;
	}

	/**
	 * Apenas retorna qual será o próximo código de agenda
	 * 
	 * @return
	 * @throws Exception
	 */
	public int RetornarProximoCodigoAgenda() throws Exception {
		try {
			String sql = "SELECT MAX(id_evento)+1 AS id_evento FROM agenda";
			PreparedStatement sqlPrep = Conexao.conectar().prepareStatement(sql);
			ResultSet rs = sqlPrep.executeQuery();
			if (rs.next()) {
				return rs.getInt("id_evento");
			} else {
				return 1;
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
			return 1;
		}
	}
}
